//algoritmus választás gomb változtatása data bindingel modelben lévő field alapján (vagy csak közvetlen használjuk a viewmodellban)

public bool InputListInAGoodFormat(string inputList) //if the string is "" returns false
{
	return true; //do the logic
}

Egyenlőre annyi hogy kirajzolja a táblára a kívánt listát:
A lista inicializálására kell külön modelbeli event? (SZERINTEM igen)
VisualListItem

        private void modelListItemChanged(object? sender, List<int> e)
        {
            throw new NotImplementedException();
        }



//ObservationCollection amit követ a view

<<<<<<< HEAD

=======
>>>>>>> b4a5fe92c0ce1dec8eebb4c01f3c047026176f92

//kitalálni hogy is működjön a rendezés maga (2 elem cseréjének eventje)

private void Start_Stop_Algorithm(object obj)
{
    //_model.StartAlgorithm();
}


Fehérre színezés működjön

-----------------------------------------------------------------------------------------------------------------------------
        private void modelPivotChanged(object? sender, int e)
        {
            //some logic for pivot, probably thats better, if we have the element in a variable what we need to color back

            //if (e.Item1 != -1) //coloring back the prev pivot
            //{
            //    modelList[e.Item1].color = "White";
            //    modelList[e.Item1].isEnabled = false;
            //}
            //modelList[e.Item2].isEnabled = true;
            //modelList[e.Item2].color = "Green";
        }



Step counter

Összehasonlítás counter
ilyenek

random lista generátor bele

ha van idő és kedv speed up 2-re megcsinálni, de elég babra megy

return _model.algorithmIsRunning; //eventel megszerezni ezt az infót
(Sérti ez egyáltalán az mvvm architectúrát?)